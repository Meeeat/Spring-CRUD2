==== C:\Users\Siberia\IdeaProjects\ModulesProjects\Spring-CRUD2\src\main\java\com\todolist\config\RootConfig.java ====

package com.todolist.config;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import jakarta.persistence.EntityManagerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.JpaVendorAdapter;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import javax.sql.DataSource;
import java.util.Properties;

@Configuration
@EnableTransactionManagement
@ComponentScan(basePackages = {"com.todolist.dao", "com.todolist.service"})
public class RootConfig {

    @Bean
    public DataSource dataSource() {
        HikariConfig config = new HikariConfig();
        config.setJdbcUrl("jdbc:mysql://localhost:3306/todo?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true");
        config.setUsername("root");
        config.setPassword("root");
        config.setDriverClassName("com.mysql.cj.jdbc.Driver");
        config.setMaximumPoolSize(10);
        config.setMinimumIdle(5);
        config.setIdleTimeout(30000);
        config.setPoolName("SpringHikariCP");

        return new HikariDataSource(config);
    }

    @Bean
    public LocalContainerEntityManagerFactoryBean entityManagerFactory() {
        LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();
        em.setDataSource(dataSource());
        em.setPackagesToScan("com.todolist.domain");

        JpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();
        em.setJpaVendorAdapter(vendorAdapter);
        em.setJpaProperties(additionalProperties());

        return em;
    }

    @Bean
    public PlatformTransactionManager transactionManager(EntityManagerFactory emf) {
        JpaTransactionManager transactionManager = new JpaTransactionManager();
        transactionManager.setEntityManagerFactory(emf);
        return transactionManager;
    }

    @Bean
    public PersistenceExceptionTranslationPostProcessor exceptionTranslation() {
        return new PersistenceExceptionTranslationPostProcessor();
    }

    private Properties additionalProperties() {
        Properties properties = new Properties();
        properties.setProperty("hibernate.dialect", "org.hibernate.dialect.MySQLDialect");
        properties.setProperty("hibernate.show_sql", "true");
        properties.setProperty("hibernate.format_sql", "true");
        properties.setProperty("hibernate.hbm2ddl.auto", "validate");
        return properties;
    }
}


==== C:\Users\Siberia\IdeaProjects\ModulesProjects\Spring-CRUD2\src\main\java\com\todolist\config\WebAppInitializer.java ====

package com.todolist.config;

import jakarta.servlet.Filter;
import jakarta.servlet.ServletContext;
import jakarta.servlet.ServletException;
import org.springframework.web.filter.CharacterEncodingFilter;
import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;

public class WebAppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {

    @Override
    protected Class<?>[] getRootConfigClasses() {
        return new Class<?>[] { RootConfig.class };
    }

    @Override
    protected Class<?>[] getServletConfigClasses() {
        return new Class<?>[] { WebConfig.class };
    }

    @Override
    protected String[] getServletMappings() {
        return new String[] { "/" };
    }

    @Override
    protected Filter[] getServletFilters() {
        CharacterEncodingFilter characterEncodingFilter = new CharacterEncodingFilter();
        characterEncodingFilter.setEncoding("UTF-8");
        characterEncodingFilter.setForceEncoding(true);
        return new Filter[] { characterEncodingFilter };
    }

    @Override
    public void onStartup(ServletContext servletContext) throws ServletException {
        super.onStartup(servletContext);
        servletContext.setInitParameter("spring.profiles.active", "default");
    }
}


==== C:\Users\Siberia\IdeaProjects\ModulesProjects\Spring-CRUD2\src\main\java\com\todolist\config\WebConfig.java ====

package com.todolist.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.MediaType;
import org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.ViewResolverRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import org.thymeleaf.spring6.SpringTemplateEngine;
import org.thymeleaf.spring6.templateresolver.SpringResourceTemplateResolver;
import org.thymeleaf.spring6.view.ThymeleafViewResolver;

@Configuration
@EnableWebMvc
@ComponentScan("com.todolist.controller")
public class WebConfig implements WebMvcConfigurer {

    private final ApplicationContext applicationContext;

    @Autowired
    public WebConfig(ApplicationContext applicationContext) {
        this.applicationContext = applicationContext;
    }

    @Bean
    public SpringResourceTemplateResolver templateResolver() {
        SpringResourceTemplateResolver templateResolver = new SpringResourceTemplateResolver();
        templateResolver.setApplicationContext(applicationContext);
        templateResolver.setPrefix("/WEB-INF/views/");
        templateResolver.setSuffix(".html");
        templateResolver.setCharacterEncoding("UTF-8");
        templateResolver.setCacheable(false);
        return templateResolver;
    }

    @Bean
    public SpringTemplateEngine templateEngine() {
        SpringTemplateEngine templateEngine = new SpringTemplateEngine();
        templateEngine.setTemplateResolver(templateResolver());
        templateEngine.setEnableSpringELCompiler(true);
        return templateEngine;
    }

    @Override
    public void configureViewResolvers(ViewResolverRegistry registry) {
        ThymeleafViewResolver resolver = new ThymeleafViewResolver();
        resolver.setTemplateEngine(templateEngine());
        resolver.setCharacterEncoding("UTF-8");
        registry.viewResolver(resolver);
    }

    @Override
    public void addResourceHandlers(ResourceHandlerRegistry registry) {
        registry.addResourceHandler("/static/**").addResourceLocations("/WEB-INF/static/");
    }

    @Override
    public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {
        configurer
                .defaultContentType(MediaType.APPLICATION_JSON)
                .favorParameter(true)
                .parameterName("mediaType")
                .ignoreAcceptHeader(false)
                .useRegisteredExtensionsOnly(false)
                .mediaType("json", MediaType.APPLICATION_JSON)
                .mediaType("xml", MediaType.APPLICATION_XML);
    }
}


==== C:\Users\Siberia\IdeaProjects\ModulesProjects\Spring-CRUD2\src\main\java\com\todolist\controller\HomeController.java ====

package com.todolist.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class HomeController {

    @GetMapping("/")
    public String home() {
        return "redirect:/tasks";
    }
}


==== C:\Users\Siberia\IdeaProjects\ModulesProjects\Spring-CRUD2\src\main\java\com\todolist\controller\TaskController.java ====

package com.todolist.controller;

import com.todolist.domain.Status;
import com.todolist.domain.Task;
import com.todolist.service.TaskService;
import com.todolist.util.AppConstants;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.List;
import java.util.Optional;

@Controller
@RequestMapping("/tasks")
@RequiredArgsConstructor
public class TaskController {

    private final TaskService taskService;

    @GetMapping
    public String listTasks(
            @RequestParam(value = "page", defaultValue = "1") int page,
            @RequestParam(value = "size", defaultValue = "5") int size,
            Model model) {

        // Валидация параметров пагинации
        if (page < AppConstants.DEFAULT_PAGE_NUMBER) {
            page = AppConstants.DEFAULT_PAGE_NUMBER;
        }

        // Проверяем размер страницы на допустимые значения
        boolean validSize = false;
        for (int availableSize : AppConstants.AVAILABLE_PAGE_SIZES) {
            if (size == availableSize) {
                validSize = true;
                break;
            }
        }

        if (!validSize) {
            size = AppConstants.DEFAULT_PAGE_SIZE;
        }

        List<Task> tasks = taskService.getAllTasks(page, size);
        int totalPages = taskService.getTotalPages(size);

        model.addAttribute("tasks", tasks);
        model.addAttribute("currentPage", page);
        model.addAttribute("totalPages", totalPages);
        model.addAttribute("pageSize", size);
        model.addAttribute("task", new Task());
        model.addAttribute("statuses", Status.values());
        model.addAttribute("taskService", taskService);
        model.addAttribute("constants", AppConstants.class);

        return "task/list";
    }

    @PostMapping("/create")
    public String createTask(@Valid @ModelAttribute("task") Task task,
                             BindingResult result,
                             Model model,
                             RedirectAttributes redirectAttributes,
                             @RequestParam(value = "page", defaultValue = "1") int page,
                             @RequestParam(value = "size", defaultValue = "10") int size) {
        if (result.hasErrors()) {
            // Возвращаем данные, необходимые для основной страницы
            List<Task> tasks = taskService.getAllTasks(page, size);
            int totalPages = taskService.getTotalPages(size);

            model.addAttribute("tasks", tasks);
            model.addAttribute("currentPage", page);
            model.addAttribute("totalPages", totalPages);
            model.addAttribute("pageSize", size);
            model.addAttribute("statuses", Status.values());
            model.addAttribute("taskService", taskService);
            model.addAttribute("constants", AppConstants.class);
            return "task/list";
        }

        taskService.createTask(task);
        redirectAttributes.addFlashAttribute("successMessage", AppConstants.TASK_CREATED_SUCCESS);
        return "redirect:/tasks?page=" + page + "&size=" + size;
    }

    @PostMapping("/update/{id}")
    @ResponseBody
    public String updateTaskInline(@PathVariable("id") Integer id,
                                   @RequestParam("description") String description,
                                   @RequestParam("status") String status) {
        try {
            if (description == null || description.trim().isEmpty()) {
                return AppConstants.DESCRIPTION_NOT_EMPTY;
            }

            if (description.length() > 100) {
                return AppConstants.DESCRIPTION_MAX_LENGTH;
            }

            Optional<Task> taskOptional = taskService.getTaskById(id);

            if (taskOptional.isPresent()) {
                Task task = taskOptional.get();
                task.setDescription(description);

                try {
                    // Конвертируем строковый статус в enum
                    Status statusEnum = Status.valueOf(status);
                    task.setStatus(statusEnum);
                } catch (IllegalArgumentException e) {
                    return "Invalid status value";
                }

                taskService.updateTask(task);
                return AppConstants.TASK_UPDATED_SUCCESS;
            } else {
                return AppConstants.TASK_NOT_FOUND;
            }
        } catch (Exception e) {
            return AppConstants.ERROR_UPDATING_TASK + e.getMessage();
        }
    }

    @PostMapping("/delete/{id}")
    @ResponseBody
    public String deleteTaskAjax(@PathVariable("id") Integer id) {
        try {
            Optional<Task> task = taskService.getTaskById(id);
            if (task.isPresent()) {
                taskService.deleteTask(id);
                return AppConstants.TASK_DELETED_SUCCESS;
            } else {
                return AppConstants.TASK_NOT_FOUND;
            }
        } catch (Exception e) {
            return AppConstants.ERROR_DELETING_TASK + e.getMessage();
        }
    }

    @GetMapping("/delete/{id}")
    public String deleteTask(@PathVariable("id") Integer id,
                             RedirectAttributes redirectAttributes,
                             @RequestParam(value = "page", defaultValue = "1") int page,
                             @RequestParam(value = "size", defaultValue = "10") int size) {
        try {
            Optional<Task> task = taskService.getTaskById(id);
            if (task.isPresent()) {
                taskService.deleteTask(id);
                redirectAttributes.addFlashAttribute("successMessage", AppConstants.TASK_DELETED_SUCCESS);
            } else {
                redirectAttributes.addFlashAttribute("errorMessage", AppConstants.TASK_NOT_FOUND);
            }
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", AppConstants.ERROR_DELETING_TASK + e.getMessage());
        }
        return "redirect:/tasks?page=" + page + "&size=" + size;
    }
}


==== C:\Users\Siberia\IdeaProjects\ModulesProjects\Spring-CRUD2\src\main\java\com\todolist\dao\TaskDAO.java ====

package com.todolist.dao;

import com.todolist.domain.Task;

import java.util.List;
import java.util.Optional;

public interface TaskDAO {

    List<Task> findAll(int page, int size);

    long count();

    Optional<Task> findById(Integer id);

    void save(Task task);

    void update(Task task);

    void delete(Integer id);
}


==== C:\Users\Siberia\IdeaProjects\ModulesProjects\Spring-CRUD2\src\main\java\com\todolist\dao\TaskDAOImpl.java ====

package com.todolist.dao;

import com.todolist.domain.Task;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

@Repository
public class TaskDAOImpl implements TaskDAO {

    @PersistenceContext
    private EntityManager entityManager;

    @Override
    public List<Task> findAll(int page, int size) {
        String s = "SELECT t FROM Task t ORDER BY t.id";
        TypedQuery<Task> query = entityManager.createQuery(s, Task.class);
        query.setFirstResult((page - 1) * size);
        query.setMaxResults(size);
        return query.getResultList();
    }

    @Override
    public long count() {
        String s = "SELECT COUNT(t) FROM Task t";
        return entityManager.createQuery(s, Long.class).getSingleResult();
    }

    @Override
    public Optional<Task> findById(Integer id) {
        Task task = entityManager.find(Task.class, id);
        return Optional.ofNullable(task);
    }

    @Override
    @Transactional
    public void save(Task task) {
        entityManager.persist(task);
    }

    @Override
    @Transactional
    public void update(Task task) {
        entityManager.merge(task);
    }

    @Override
    @Transactional
    public void delete(Integer id) {
        Task task = entityManager.find(Task.class, id);
        if (task != null) {
            entityManager.remove(task);
        }
    }
}


==== C:\Users\Siberia\IdeaProjects\ModulesProjects\Spring-CRUD2\src\main\java\com\todolist\domain\Status.java ====

package com.todolist.domain;

public enum Status {
    IN_PROGRESS, DONE, PAUSED
}


==== C:\Users\Siberia\IdeaProjects\ModulesProjects\Spring-CRUD2\src\main\java\com\todolist\domain\Task.java ====

package com.todolist.domain;

import com.todolist.util.AppConstants;
import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "task")
public class Task {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @NotBlank(message = AppConstants.DESCRIPTION_NOT_EMPTY)
    @Size(max = 100, message = AppConstants.DESCRIPTION_MAX_LENGTH)
    @Column(name = "description", nullable = false, length = 100)
    private String description;

    @Enumerated(EnumType.ORDINAL)
    @Column(name = "status", nullable = false)
    private Status status = Status.IN_PROGRESS;
}


==== C:\Users\Siberia\IdeaProjects\ModulesProjects\Spring-CRUD2\src\main\java\com\todolist\service\TaskService.java ====

package com.todolist.service;

import com.todolist.domain.Task;

import java.util.List;
import java.util.Optional;

public interface TaskService {

    List<Task> getAllTasks(int page, int size);

    long getTotalTasksCount();

    int getTotalPages(int size);

    Optional<Task> getTaskById(Integer id);

    void createTask(Task task);

    void updateTask(Task task);

    void deleteTask(Integer id);
}


==== C:\Users\Siberia\IdeaProjects\ModulesProjects\Spring-CRUD2\src\main\java\com\todolist\service\TaskServiceImpl.java ====

package com.todolist.service;

import com.todolist.dao.TaskDAO;
import com.todolist.domain.Task;
import com.todolist.util.AppConstants;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class TaskServiceImpl implements TaskService {

    private final TaskDAO taskDAO;

    @Override
    @Transactional(readOnly = true)
    public List<Task> getAllTasks(int page, int size) {
        // Проверка параметров пагинации и их корректировка, если необходимо
        if (page < AppConstants.DEFAULT_PAGE_NUMBER) {
            page = AppConstants.DEFAULT_PAGE_NUMBER;
        }

        // Проверяем, содержится ли размер страницы в списке доступных размеров
        boolean validSize = false;
        for (int availableSize : AppConstants.AVAILABLE_PAGE_SIZES) {
            if (size == availableSize) {
                validSize = true;
                break;
            }
        }

        if (!validSize) {
            size = AppConstants.DEFAULT_PAGE_SIZE;
        }

        return taskDAO.findAll(page, size);
    }

    @Override
    @Transactional(readOnly = true)
    public long getTotalTasksCount() {
        return taskDAO.count();
    }

    @Override
    @Transactional(readOnly = true)
    public int getTotalPages(int size) {
        // Проверка размера страницы и его корректировка, если необходимо
        boolean validSize = false;
        for (int availableSize : AppConstants.AVAILABLE_PAGE_SIZES) {
            if (size == availableSize) {
                validSize = true;
                break;
            }
        }

        if (!validSize) {
            size = AppConstants.DEFAULT_PAGE_SIZE;
        }

        long count = getTotalTasksCount();
        return (int) Math.ceil((double) count / size);
    }

    @Override
    @Transactional(readOnly = true)
    public Optional<Task> getTaskById(Integer id) {
        return taskDAO.findById(id);
    }

    @Override
    @Transactional
    public void createTask(Task task) {
        taskDAO.save(task);
    }

    @Override
    @Transactional
    public void updateTask(Task task) {
        taskDAO.update(task);
    }

    @Override
    @Transactional
    public void deleteTask(Integer id) {
        taskDAO.delete(id);
    }
}


==== C:\Users\Siberia\IdeaProjects\ModulesProjects\Spring-CRUD2\src\main\java\com\todolist\util\AppConstants.java ====

package com.todolist.util;

import lombok.AccessLevel;
import lombok.NoArgsConstructor;

/**
 * Application constants
 * Содержит все константные строки приложения для централизованного управления текстами
 */
@NoArgsConstructor(access = AccessLevel.PRIVATE)
public class AppConstants {
    // Success messages
    public static final String TASK_CREATED_SUCCESS = "Task created successfully!";
    public static final String TASK_UPDATED_SUCCESS = "Task updated successfully!";
    public static final String TASK_DELETED_SUCCESS = "Task deleted successfully!";

    // Error messages
    public static final String TASK_NOT_FOUND = "Task not found";
    public static final String ERROR_UPDATING_TASK = "Error updating task: ";
    public static final String ERROR_DELETING_TASK = "Error deleting task: ";
    public static final String ERROR_PREFIX = "Error: ";
    public static final String DESCRIPTION_EMPTY_ERROR = "Description cannot be empty!";

    // Validation messages
    public static final String DESCRIPTION_NOT_EMPTY = "Description cannot be empty";
    public static final String DESCRIPTION_MAX_LENGTH = "Description must be less than 100 characters";

    // View text
    public static final String TASK_LIST_TITLE = "Task List";
    public static final String NO_TASKS_FOUND = "No tasks found";
    public static final String CREATE_NEW_TASK = "Create New Task";
    public static final String TASK_TOTAL_COUNT = "Total: %d / %d";
    public static final String PAGE_SIZE_TEXT = "Page size:";
    public static final String ITEMS_PER_PAGE_TEXT = "items per page";

    // Table headers
    public static final String COLUMN_ID = "ID";
    public static final String COLUMN_DESCRIPTION = "Description";
    public static final String COLUMN_STATUS = "Status";
    public static final String COLUMN_ACTIONS = "Actions";

    // Button labels
    public static final String BUTTON_ADD = "Add Task";
    public static final String BUTTON_EDIT = "Edit";
    public static final String BUTTON_DELETE = "Delete";
    public static final String BUTTON_SAVE = "Save";
    public static final String BUTTON_CANCEL = "Cancel";

    // Pagination defaults
    public static final int DEFAULT_PAGE_SIZE = 5;
    public static final int DEFAULT_PAGE_NUMBER = 1;
    public static final int[] AVAILABLE_PAGE_SIZES = {5, 10, 20, 50};

    // UI constants
    public static final int ALERT_AUTO_CLOSE_DELAY = 5000; // миллисекунды

    // Table column widths
    public static final String COLUMN_ID_WIDTH = "8%";
    public static final String COLUMN_DESCRIPTION_WIDTH = "50%";
    public static final String COLUMN_STATUS_WIDTH = "17%";
    public static final String COLUMN_ACTIONS_WIDTH = "25%";

    // CSS classes
    public static final String IN_PROGRESS_CLASS = "task-status-0";
    public static final String DONE_CLASS = "task-status-1";
    public static final String PAUSED_CLASS = "task-status-2";
    public static final String IN_PROGRESS_BADGE = "bg-warning";
    public static final String DONE_BADGE = "bg-success";
    public static final String PAUSED_BADGE = "bg-danger";
}


==== C:\Users\Siberia\IdeaProjects\ModulesProjects\Spring-CRUD2\src\main\resources\database.properties ====



==== C:\Users\Siberia\IdeaProjects\ModulesProjects\Spring-CRUD2\src\main\webapp\index.html ====



==== C:\Users\Siberia\IdeaProjects\ModulesProjects\Spring-CRUD2\src\main\webapp\WEB-INF\web.xml ====

<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="https://jakarta.ee/xml/ns/jakartaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_6_0.xsd"
         version="6.0">

    <display-name>Todo List Application</display-name>

    <!-- Spring MVC Dispatcher Servlet is configured programmatically in WebAppInitializer -->

    <welcome-file-list>
        <welcome-file>index.html</welcome-file>
    </welcome-file-list>

</web-app>


==== C:\Users\Siberia\IdeaProjects\ModulesProjects\Spring-CRUD2\src\main\webapp\WEB-INF\static\css\style.css ====

/* Custom styles for Todo List application */
body {
    background-color: #f8f9fa;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

.card {
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
}

.card-header {
    font-weight: 600;
}

.task-status-0 { /* IN_PROGRESS */
    background-color: #fff3cd !important;
}

.task-status-1 { /* DONE */
    background-color: #d1e7dd !important;
}

.task-status-2 { /* PAUSED */
    background-color: #f8d7da !important;
}

.task-row .edit-form {
    display: none;
}

.task-row.editing .task-display {
    display: none;
}

.task-row.editing .edit-form {
    display: flex;
    gap: 5px;
}

.task-row .task-display {
    display: flex;
    gap: 5px;
}

.pagination {
    margin-top: 20px;
}

.table-responsive {
    overflow-x: auto;
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .container {
        max-width: 100%;
        padding-left: 15px;
        padding-right: 15px;
    }
}


==== C:\Users\Siberia\IdeaProjects\ModulesProjects\Spring-CRUD2\src\main\webapp\WEB-INF\static\js\main.js ====

document.addEventListener('DOMContentLoaded', function() {
    // Auto-close alerts after 5 seconds
    const alertElements = document.querySelectorAll('.alert');
    alertElements.forEach(function(alert) {
        setTimeout(function() {
            const closeButton = alert.querySelector('.btn-close');
            if (closeButton) {
                closeButton.click();
            }
        }, 5000);
    });

    // Confirm delete operations
    const deleteButtons = document.querySelectorAll('.btn-danger[href*="/delete/"]');
    deleteButtons.forEach(function(button) {
        button.addEventListener('click', function(event) {
            if (!confirm('Are you sure you want to delete this task?')) {
                event.preventDefault();
            }
        });
    });

    // Highlight current page in pagination
    const currentPageItem = document.querySelector('.page-item.active');
    if (currentPageItem) {
        currentPageItem.classList.add('fw-bold');
    }

    // Apply task status highlighting
    const taskRows = document.querySelectorAll('[class*="task-status-"]');
    taskRows.forEach(function(row) {
        const status = row.querySelector('td:nth-child(3)').textContent;
        const statusCell = row.querySelector('td:nth-child(3)');

        let badgeClass = 'bg-warning';
        if (status === 'DONE') {
            badgeClass = 'bg-success';
        } else if (status === 'PAUSED') {
            badgeClass = 'bg-danger';
        }

        statusCell.innerHTML = `<span class="badge ${badgeClass}">${status}</span>`;
    });
});


==== C:\Users\Siberia\IdeaProjects\ModulesProjects\Spring-CRUD2\src\main\webapp\WEB-INF\views\task\list.html ====

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="_csrf" th:content="${_csrf != null ? _csrf.token : ''}"/>
    <meta name="_csrf_header" th:content="${_csrf != null ? _csrf.headerName : 'X-CSRF-TOKEN'}"/>
    <title th:text="${constants.TASK_LIST_TITLE}">Task List</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css">
    <style>
        .task-status-0 { background-color: #fff3cd; } /* IN_PROGRESS */
        .task-status-1 { background-color: #d1e7dd; } /* DONE */
        .task-status-2 { background-color: #f8d7da; } /* PAUSED */
        .card {
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        body {
            background-color: #f8f9fa;
        }
        .edit-form {
            display: none;
        }
        .task-row.editing .task-display {
            display: none;
        }
        .task-row.editing .edit-form {
            display: flex;
        }
        .page-size-selector {
            width: auto;
            display: inline-block;
            margin-left: 10px;
        }
    </style>
</head>
<body>
<div class="container mt-4">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h3 class="mb-0" th:text="${constants.TASK_LIST_TITLE}">Task List</h3>
                    <span class="badge bg-light text-dark" th:text="${#strings.replace(constants.TASK_TOTAL_COUNT, '%d / %d', #lists.size(tasks) + ' / ' + taskService.getTotalTasksCount())}">Total: 0</span>
                </div>
                <div class="card-body">
                    <!-- Success message -->
                    <div th:if="${successMessage}" class="alert alert-success alert-dismissible fade show" role="alert">
                        <span th:text="${successMessage}"></span>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>

                    <!-- Error message -->
                    <div th:if="${errorMessage}" class="alert alert-danger alert-dismissible fade show" role="alert">
                        <span th:text="${errorMessage}"></span>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>

                    <!-- Create new task form -->
                    <div class="card mb-4">
                        <div class="card-header bg-success text-white">
                            <h5 class="mb-0" th:text="${constants.CREATE_NEW_TASK}">Create New Task</h5>
                        </div>
                        <div class="card-body">
                            <form th:action="@{/tasks/create}" th:object="${task}" method="post">
                                <!-- Description field -->
                                <div class="row g-3 align-items-center">
                                    <div class="col-md-5">
                                        <input type="text" class="form-control" th:placeholder="${constants.COLUMN_DESCRIPTION}" th:field="*{description}"
                                               th:classappend="${#fields.hasErrors('description') ? 'is-invalid' : ''}">
                                        <div class="invalid-feedback" th:if="${#fields.hasErrors('description')}" th:errors="*{description}">
                                            Description error
                                        </div>
                                    </div>

                                    <!-- Status field -->
                                    <div class="col-md-4">
                                        <select class="form-select" th:field="*{status}">
                                            <option th:each="statusOption : ${statuses}"
                                                    th:value="${statusOption}"
                                                    th:text="${statusOption}">Status</option>
                                        </select>
                                    </div>

                                    <!-- Submit button -->
                                    <div class="col-md-3">
                                        <button type="submit" class="btn btn-success w-100" th:text="${constants.BUTTON_ADD}">Add Task</button>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>

                    <!-- Tasks table -->
                    <div class="table-responsive">
                        <table class="table table-bordered table-hover">
                            <thead class="table-dark">
                            <tr>
                                <th th:style="'width: ' + ${constants.COLUMN_ID_WIDTH}" th:text="${constants.COLUMN_ID}">ID</th>
                                <th th:style="'width: ' + ${constants.COLUMN_DESCRIPTION_WIDTH}" th:text="${constants.COLUMN_DESCRIPTION}">Description</th>
                                <th th:style="'width: ' + ${constants.COLUMN_STATUS_WIDTH}" th:text="${constants.COLUMN_STATUS}">Status</th>
                                <th th:style="'width: ' + ${constants.COLUMN_ACTIONS_WIDTH}" th:text="${constants.COLUMN_ACTIONS}">Actions</th>
                            </tr>
                            </thead>
                            <tbody>
                            <tr th:each="task : ${tasks}" th:classappend="${'task-status-' + task.status.ordinal()}" class="task-row" th:attr="data-task-id=${task.id}">
                                <td th:text="${task.id}"></td>
                                <td>
                                    <!-- Display view -->
                                    <span class="task-display task-display-description" th:text="${task.description}"></span>
                                    <!-- Edit form -->
                                    <div class="edit-form">
                                        <input type="text" class="form-control edit-description" th:value="${task.description}">
                                    </div>
                                </td>
                                <td>
                                    <!-- Display view -->
                                    <span class="task-display task-status" th:text="${task.status}"></span>
                                    <!-- Edit form -->
                                    <div class="edit-form">
                                        <select class="form-select edit-status">
                                            <option th:each="statusOption : ${statuses}"
                                                    th:value="${statusOption}"
                                                    th:text="${statusOption}"
                                                    th:selected="${statusOption == task.status}">Status</option>
                                        </select>
                                    </div>
                                </td>
                                <td>
                                    <div class="task-display">
                                        <button class="btn btn-sm btn-primary edit-btn" th:text="${constants.BUTTON_EDIT}">Edit</button>
                                        <button class="btn btn-sm btn-danger delete-btn" th:text="${constants.BUTTON_DELETE}">Delete</button>
                                    </div>
                                    <div class="edit-form">
                                        <button class="btn btn-sm btn-success save-btn" th:text="${constants.BUTTON_SAVE}">Save</button>
                                        <button class="btn btn-sm btn-secondary cancel-btn" th:text="${constants.BUTTON_CANCEL}">Cancel</button>
                                    </div>
                                </td>
                            </tr>
                            <tr th:if="${tasks.empty}">
                                <td colspan="4" class="text-center" th:text="${constants.NO_TASKS_FOUND}">No tasks found</td>
                            </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- Pagination with page size selector -->
                    <div class="d-flex justify-content-between align-items-center" th:if="${totalPages > 0}">
                        <div class="d-flex align-items-center">
                            <span th:text="${constants.PAGE_SIZE_TEXT}">Page size:</span>
                            <select id="pageSizeSelector" class="form-select page-size-selector mx-2">
                                <option th:each="size : ${constants.AVAILABLE_PAGE_SIZES}"
                                        th:value="${size}"
                                        th:text="${size}"
                                        th:selected="${pageSize == size}">5</option>
                            </select>
                            <span th:text="${constants.ITEMS_PER_PAGE_TEXT}">items per page</span>
                        </div>

                        <nav>
                            <ul class="pagination justify-content-center mb-0">
                                <li class="page-item" th:classappend="${currentPage == 1 ? 'disabled' : ''}">
                                    <a class="page-link" th:href="@{/tasks(page=1, size=${pageSize})}" aria-label="First">
                                        <span aria-hidden="true">&laquo;&laquo;</span>
                                    </a>
                                </li>
                                <li class="page-item" th:classappend="${currentPage == 1 ? 'disabled' : ''}">
                                    <a class="page-link" th:href="@{/tasks(page=${currentPage - 1}, size=${pageSize})}" aria-label="Previous">
                                        <span aria-hidden="true">&laquo;</span>
                                    </a>
                                </li>

                                <li class="page-item" th:each="i : ${#numbers.sequence(1, totalPages)}"
                                    th:classappend="${i == currentPage ? 'active' : ''}">
                                    <a class="page-link" th:href="@{/tasks(page=${i}, size=${pageSize})}" th:text="${i}"></a>
                                </li>

                                <li class="page-item" th:classappend="${currentPage == totalPages ? 'disabled' : ''}">
                                    <a class="page-link" th:href="@{/tasks(page=${currentPage + 1}, size=${pageSize})}" aria-label="Next">
                                        <span aria-hidden="true">&raquo;</span>
                                    </a>
                                </li>
                                <li class="page-item" th:classappend="${currentPage == totalPages ? 'disabled' : ''}">
                                    <a class="page-link" th:href="@{/tasks(page=${totalPages}, size=${pageSize})}" aria-label="Last">
                                        <span aria-hidden="true">&raquo;&raquo;</span>
                                    </a>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
<script th:inline="javascript">
    document.addEventListener('DOMContentLoaded', function() {
        // Получаем константы из Spring
        const constants = {
            TASK_DELETED_SUCCESS: [[${constants.TASK_DELETED_SUCCESS}]],
            TASK_UPDATED_SUCCESS: [[${constants.TASK_UPDATED_SUCCESS}]],
            DESCRIPTION_EMPTY_ERROR: [[${constants.DESCRIPTION_EMPTY_ERROR}]],
            ERROR_PREFIX: [[${constants.ERROR_PREFIX}]],
            ALERT_AUTO_CLOSE_DELAY: [[${constants.ALERT_AUTO_CLOSE_DELAY}]],
            IN_PROGRESS_CLASS: [[${constants.IN_PROGRESS_CLASS}]],
            DONE_CLASS: [[${constants.DONE_CLASS}]],
            PAUSED_CLASS: [[${constants.PAUSED_CLASS}]],
            IN_PROGRESS_BADGE: [[${constants.IN_PROGRESS_BADGE}]],
            DONE_BADGE: [[${constants.DONE_BADGE}]],
            PAUSED_BADGE: [[${constants.PAUSED_BADGE}]]
        };

        // Auto-close alerts
        const alertElements = document.querySelectorAll('.alert');
        alertElements.forEach(function(alert) {
            setTimeout(function() {
                const closeButton = alert.querySelector('.btn-close');
                if (closeButton) {
                    closeButton.click();
                }
            }, constants.ALERT_AUTO_CLOSE_DELAY);
        });

        // Page size selector handler
        const pageSizeSelector = document.getElementById('pageSizeSelector');
        pageSizeSelector.addEventListener('change', function() {
            const selectedSize = this.value;
            window.location.href = `/tasks?page=1&size=${selectedSize}`;
        });

        // Apply status styling
        const taskRows = document.querySelectorAll('[class*="task-status-"]');
        taskRows.forEach(function(row) {
            const status = row.querySelector('.task-status').textContent;
            const statusCell = row.querySelector('td:nth-child(3)');
            const statusElement = statusCell.querySelector('.task-status');

            let badgeClass = constants.IN_PROGRESS_BADGE;
            if (status === 'DONE') {
                badgeClass = constants.DONE_BADGE;
            } else if (status === 'PAUSED') {
                badgeClass = constants.PAUSED_BADGE;
            }

            statusElement.outerHTML = `<span class="badge ${badgeClass} task-status">${status}</span>`;
        });

        // Inline editing
        const editButtons = document.querySelectorAll('.edit-btn');
        const saveButtons = document.querySelectorAll('.save-btn');
        const cancelButtons = document.querySelectorAll('.cancel-btn');
        const deleteButtons = document.querySelectorAll('.delete-btn');

        // Enable edit mode
        editButtons.forEach(function(button) {
            button.addEventListener('click', function() {
                const taskRow = this.closest('.task-row');
                taskRow.classList.add('editing');
            });
        });

        // Cancel edit mode
        cancelButtons.forEach(function(button) {
            button.addEventListener('click', function() {
                const taskRow = this.closest('.task-row');
                taskRow.classList.remove('editing');
            });
        });

        // Delete task без подтверждения
        deleteButtons.forEach(function(button) {
            button.addEventListener('click', function() {
                const taskRow = this.closest('.task-row');
                const taskId = taskRow.dataset.taskId;

                // Отправляем AJAX запрос на удаление задачи
                fetch(`/tasks/delete/${taskId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    }
                })
                    .then(response => response.text())
                    .then(data => {
                        if (data === constants.TASK_DELETED_SUCCESS) {
                            // Удаляем строку из таблицы
                            taskRow.remove();

                            // Обновляем общее количество (прямое обновление DOM)
                            updateCountBadge();

                            // Показываем сообщение об успехе
                            showMessage(data);
                        } else {
                            showMessage(constants.ERROR_PREFIX + data, 'danger');
                        }
                    })
                    .catch(error => {
                        showMessage(constants.ERROR_PREFIX + error, 'danger');
                    });
            });
        });

        // Save changes
        saveButtons.forEach(function(button) {
            button.addEventListener('click', function() {
                const taskRow = this.closest('.task-row');
                const taskId = taskRow.dataset.taskId;
                const description = taskRow.querySelector('.edit-description').value;
                const status = taskRow.querySelector('.edit-status').value;

                // Client-side validation
                if (!description.trim()) {
                    showMessage(constants.DESCRIPTION_EMPTY_ERROR, 'danger');
                    return;
                }

                // Send AJAX request to update task
                fetch(`/tasks/update/${taskId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `description=${encodeURIComponent(description)}&status=${encodeURIComponent(status)}`
                })
                    .then(response => response.text())
                    .then(data => {
                        if (data === constants.TASK_UPDATED_SUCCESS) {
                            // Update display values
                            const descriptionDisplay = taskRow.querySelector('.task-display-description');
                            descriptionDisplay.textContent = description;

                            // Update status badge
                            const statusBadge = taskRow.querySelector('.task-status');
                            statusBadge.textContent = status;

                            // Update row class for color coding
                            taskRow.classList.remove(constants.IN_PROGRESS_CLASS, constants.DONE_CLASS, constants.PAUSED_CLASS);

                            let statusClass = constants.IN_PROGRESS_CLASS;
                            let badgeClass = constants.IN_PROGRESS_BADGE;

                            if (status === 'DONE') {
                                statusClass = constants.DONE_CLASS;
                                badgeClass = constants.DONE_BADGE;
                            } else if (status === 'PAUSED') {
                                statusClass = constants.PAUSED_CLASS;
                                badgeClass = constants.PAUSED_BADGE;
                            }

                            taskRow.classList.add(statusClass);

                            // Update badge color
                            statusBadge.classList.remove(constants.IN_PROGRESS_BADGE, constants.DONE_BADGE, constants.PAUSED_BADGE);
                            statusBadge.classList.add(badgeClass);

                            // Exit edit mode
                            taskRow.classList.remove('editing');

                            // Show success message
                            showMessage(data);
                        } else {
                            showMessage(constants.ERROR_PREFIX + data, 'danger');
                        }
                    })
                    .catch(error => {
                        showMessage(constants.ERROR_PREFIX + error, 'danger');
                    });
            });
        });

        // Helper function to show messages
        function showMessage(message, type = 'success') {
            const alertContainer = document.createElement('div');
            alertContainer.className = `alert alert-${type} alert-dismissible fade show`;
            alertContainer.innerHTML = `
                <span>${message}</span>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;

            const cardBody = document.querySelector('.card-body');
            cardBody.insertBefore(alertContainer, cardBody.firstChild);

            setTimeout(() => {
                alertContainer.querySelector('.btn-close').click();
            }, constants.ALERT_AUTO_CLOSE_DELAY);
        }

        // Helper function to update count badge directly in DOM
        function updateCountBadge() {
            const countBadge = document.querySelector('.badge.bg-light.text-dark');
            if (countBadge) {
                const taskRows = document.querySelectorAll('.task-row');
                const currentCount = taskRows.length;
                const totalCountText = countBadge.textContent;
                const totalMatch = totalCountText.match(/Total: (\d+) \/ (\d+)/);

                if (totalMatch && totalMatch[2]) {
                    const totalCount = parseInt(totalMatch[2]);
                    countBadge.textContent = `Total: ${currentCount} / ${totalCount - 1}`;
                }
            }
        }

        // Focus description field in form
        const descriptionField = document.querySelector('input[name="description"]');
        if (descriptionField) {
            descriptionField.focus();
        }
    });
</script>
</body>
</html>


